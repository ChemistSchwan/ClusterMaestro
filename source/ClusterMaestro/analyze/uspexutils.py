import ClusterMaestro as cm
import numpy as np
from copy import deepcopy
from ase.io import read
import matplotlib.pyplot as plt
import matplotlib.colors as colors
import sys, os, shutil


def splitter(dataFile="gatheredPOSCARS", showDensity=False):
    """
    Splits all structures contained in the "gatheredPOSCARS" file into seperate files.

    Parameters
    ----------

    dataFile: str
        File, which contains the uspex-POSCARS.
    """
    files = []
    xyzString = ""
    headcounter = 0
    with open(dataFile, "r") as source:
        for i, line in enumerate(source):
            headcounter += 1
            if headcounter > 10:
                if len(line.split()) != 3:
                    files.append(xyzString)
                    headcounter = 0
                    xyzString = ""
            xyzString += line
        files.append(xyzString)
    if os.path.exists("poscar_split"):
        shutil.rmtree("poscar_split")
    os.mkdir("poscar_split")
    for i, string in enumerate(files):
        with open("poscar_split/uspex_split_%.3d.vasp" % (i + 1), "w") as target:
            target.write(string)
        if showDensity:
            system = cm.System.solid.Solid(
                read(
                    "poscar_split/uspex_split_{:03d}.vasp".format(i + 1), format="vasp"
                )
            )
            print(
                "Structure %d has the density: %.3f g/cm^3" % (i, system.calcDensity())
            )


def readInput(fileName="Individuals"):
    """
    Reads the output of the datasummary file, stores it in a handy array and returns that array.

    Array will be the following format:
    lines represent the structures, columns are: 0: generation; 1: ID; 2: Enthalpy; 3: Density, 4: Fitness

    Parameters
    ----------

    fileName: str
        Name of the file, which will be read in. Must be in th format of an USPEX 'Individuals' file.
    """
    dataList = []
    try:
        with open(fileName, "r") as source:
            for i, line in enumerate(source):
                if i > 1:
                    sL = line.split()
                    dataList.append([sL[0], sL[1], sL[7], sL[9], sL[10]])
        dataArray = np.array(dataList, dtype="float64")
    except:
        dataList = []
        with open(fileName, "r") as source:
            for i, line in enumerate(source):
                if i > 1:
                    sL = line.split()
                    dataList.append([sL[0], sL[1], sL[6], sL[8], sL[9]])
                    try:
                        dataList[-1][-1] = float(dataList[-1][-1])
                    except:
                        dataList[-1][-1] = np.nan
        dataArray = np.array(dataList, dtype="float64")
    return dataArray


def plot(data, yLims=[None, None, None], xLims=[None, None, None]):
    """
    Plots the data generated by the *readInput* function in a better way than USPEX does it.

    Parameters
    ----------

    data: array
        Data array from the *readInput* function.
    yLims: list of (float, float, float) or None
        Limits of the y-axis. Is executed on the figures in the following order:
        1: ID vs Enthalpy, 2: ID vs Density, 3: Enthalpy vs Density
    xLims: list of (float, float, float) or None
        Limits of the x-axis. Is executed on the figures in the following order:
        1: ID vs Enthalpy, 2: ID vs Density, 3: Enthalpy vs Density
    """
    # Number per generation
    lenGens, last = [0], 1
    for i in data[:, 0]:
        if i != last:
            lenGens.append(1)
        else:
            lenGens[-1] += 1
        last = i

    # Plot ID vs Enthalpy
    plt.clf()
    data[:, 2] -= min(data[:, 2])
    fig, ax = plt.subplots(figsize=(6, 3))
    ax.scatter(data[:, 1], data[:, 2], marker="o", zorder=10)
    if xLims[0] == None:
        xLims_p1 = ax.set_xlim()
    else:
        xLims_p1 = xLims[0]
        ax.set_xlim(xLims[0])
    if yLims[0] == None:
        yLims_p1 = ax.set_ylim()
    else:
        yLims_p1 = yLims[0]
        ax.set_ylim(yLims[0])
    j, boxList = 0, []
    for i, width in enumerate(lenGens):
        if i % 2 == 0:
            boxList.append((j, width))
        j += width
    ax.broken_barh(boxList, (yLims_p1[0] - 100, 1000), facecolors="#c0f1f8", zorder=0.1)
    ax.grid(axis="y")
    plt.subplots_adjust(bottom=0.15, left=0.1, right=0.98, top=0.98)
    ax.set_ylabel("relative enthalpy / eV")
    ax.set_xlabel("Structure ID")
    plt.savefig("Enthalpy_ID.pdf", format="pdf")

    # Plot ID vs Density
    plt.clf()

    fig, ax = plt.subplots(figsize=(6, 3))
    ax.scatter(data[:, 1], data[:, 3], marker="o", zorder=10)
    if xLims[1] == None:
        xLims_p2 = ax.set_xlim()
    else:
        xLims_p2 = xLims[1]
        ax.set_xlim(xLims[1])
    if yLims[1] == None:
        yLims_p2 = ax.set_ylim()
    else:
        yLims_p2 = yLims[1]
        ax.set_ylim(yLims[1])
    j, boxList = 0, []
    for i, width in enumerate(lenGens):
        if i % 2 == 0:
            boxList.append((j, width))
        j += width
    ax.grid(axis="y")
    ax.broken_barh(boxList, (yLims_p2[0] - 100, 1000), facecolors="#c0f1f8", zorder=0.1)
    plt.subplots_adjust(bottom=0.15, left=0.1, right=0.98, top=0.98)
    ax.set_ylabel("Density / g/cm$^3$")
    ax.set_xlabel("Structure ID")
    plt.savefig("Density_ID.pdf", format="pdf")

    # Plot Enthalpy vs Density
    plt.clf()
    data[:, 2] -= min(data[:, 2])
    fig, ax = plt.subplots(figsize=(6, 3))
    colorArray = np.array(deepcopy(data[:, 0]), dtype="int")
    IDcounter = 0
    for genumber, i in enumerate(lenGens):
        ax.scatter(
            data[IDcounter : IDcounter + i, 3],
            data[IDcounter : IDcounter + i, 2],
            marker="o",
            s=15,
            zorder=10,
            label="Gen %d" % genumber,
        )
        IDcounter += i
    if xLims[2] == None:
        xLims_p3 = ax.set_xlim()
    else:
        xLims_p3 = xLims[2]
        ax.set_xlim(xLims[2])
    if yLims[2] == None:
        yLims_p3 = ax.set_ylim()
    else:
        yLims_p3 = yLims[2]
        ax.set_ylim(yLims[2])
    #    ax.legend(loc="center right", borderaxespad=-16, ncol=2)
    plt.subplots_adjust(left=0.1, right=0.95)
    ax.grid()
    plt.subplots_adjust(bottom=0.15, left=0.1, right=0.98, top=0.98)
    ax.set_xlabel("Density / g/cm$^3$")
    ax.set_ylabel("relative enthalpy / eV")
    plt.savefig("Enthalpy_Density.pdf", format="pdf")

    # Plot ID vs Density and Enthalpy
    plt.clf()

    fig, ax1 = plt.subplots(figsize=(8, 4))
    ax2 = ax1.twinx()
    color1 = "#005b9a"
    color2 = "#c33232"

    ax1.scatter(data[:, 1], data[:, 2], marker="o", zorder=10, color=color1)
    ax2.scatter(data[:, 1], data[:, 3], marker="o", zorder=10, color=color2)
    ax1.set_ylim(yLims_p1)
    ax2.set_ylim(yLims_p2)
    j, boxList = 0, []
    for i, width in enumerate(lenGens):
        if i % 2 == 0:
            boxList.append((j, width))
        j += width
    ax1.grid(axis="y")
    ax1.broken_barh(
        boxList, (yLims_p2[0] - 100, 1000), facecolors="#c0f1f8", zorder=0.1
    )
    ax2.set_ylabel("Density / g/cm$^3$", color=color2)
    ax1.set_ylabel("relative energy / eV", color=color1)
    ax1.set_xlabel("Structure ID")
    ax1.tick_params(axis="y", labelcolor=color1)
    ax2.tick_params(axis="y", labelcolor=color2)
    ax2.set_yticks(
        np.linspace(ax2.get_yticks()[0], ax2.get_yticks()[-1], len(ax1.get_yticks()))
    )
    ax1.set_yticks(
        np.linspace(ax1.get_yticks()[0], ax1.get_yticks()[-1], len(ax2.get_yticks()))
    )

    plt.savefig("Density-Enthalpy_ID.pdf", format="pdf")
